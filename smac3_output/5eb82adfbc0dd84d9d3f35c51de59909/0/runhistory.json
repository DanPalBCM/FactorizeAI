{
  "stats": {
    "submitted": 10,
    "finished": 10,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      Infinity,
      0.0,
      2,
      1696443514.8270023,
      1696443514.8285003,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFOctober.py\", line 716, in train\n    X, X_r = NMF_sklearn(X_scaled, **config_dict)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFOctober.py\", line 59, in NMF_sklearn\n    W = model.fit_transform(X)\n        ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/utils/_set_output.py\", line 140, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1566, in fit_transform\n    W, H, n_iter = self._fit_transform(X, W=W, H=H)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1618, in _fit_transform\n    raise ValueError(\nValueError: When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.\n",
        "error": "ValueError('When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.')"
      }
    ],
    [
      1,
      null,
      398764591,
      null,
      Infinity,
      0.0,
      2,
      1696443514.8300426,
      1696443514.8313313,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFOctober.py\", line 716, in train\n    X, X_r = NMF_sklearn(X_scaled, **config_dict)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFOctober.py\", line 59, in NMF_sklearn\n    W = model.fit_transform(X)\n        ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/utils/_set_output.py\", line 140, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1566, in fit_transform\n    W, H, n_iter = self._fit_transform(X, W=W, H=H)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1618, in _fit_transform\n    raise ValueError(\nValueError: When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.\n",
        "error": "ValueError('When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.')"
      }
    ],
    [
      2,
      null,
      209652396,
      null,
      1.0,
      0.027819156646728516,
      1,
      1696443514.832882,
      1696443514.8613825,
      {}
    ],
    [
      2,
      null,
      398764591,
      null,
      1.0,
      0.027135372161865234,
      1,
      1696443514.863075,
      1696443514.8909929,
      {}
    ],
    [
      2,
      null,
      924231285,
      null,
      1.0,
      0.02729058265686035,
      1,
      1696443514.8933423,
      1696443514.9215162,
      {}
    ],
    [
      3,
      null,
      209652396,
      null,
      1.0,
      0.027849197387695312,
      1,
      1696443515.064547,
      1696443515.0931466,
      {}
    ],
    [
      3,
      null,
      398764591,
      null,
      1.0,
      0.027545690536499023,
      1,
      1696443515.095001,
      1696443515.1233182,
      {}
    ],
    [
      3,
      null,
      924231285,
      null,
      1.0,
      0.02741551399230957,
      1,
      1696443515.1251764,
      1696443515.153358,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      0.5744313257150402,
      0.03736567497253418,
      1,
      1696443515.1557417,
      1696443515.1938598,
      {}
    ],
    [
      4,
      null,
      398764591,
      null,
      0.5744313257150402,
      0.037483930587768555,
      1,
      1696443515.1957507,
      1696443515.2339907,
      {}
    ]
  ],
  "configs": {
    "1": {
      "alpha_W": 0.24019066896289587,
      "init": "nndsvda",
      "l1_ratio": 0.09675709353759886,
      "n_components": 5,
      "solver": "mu",
      "verbose": 0,
      "beta_loss": "itakura-saito"
    },
    "2": {
      "alpha_W": 0.46588086588308214,
      "init": "random",
      "l1_ratio": 0.7556943319737911,
      "n_components": 18,
      "solver": "cd",
      "verbose": 1
    },
    "3": {
      "alpha_W": 0.8025957007038718,
      "init": "random",
      "l1_ratio": 0.7024762586578099,
      "n_components": 15,
      "solver": "mu",
      "verbose": 0,
      "beta_loss": "frobenius"
    },
    "4": {
      "alpha_W": 0.6436704297351775,
      "init": "nndsvd",
      "l1_ratio": 0.7493578609931442,
      "n_components": 12,
      "solver": "mu",
      "verbose": 0,
      "beta_loss": "kullback-leibler"
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Acquisition Function Maximizer: Random Search (sorted)",
    "4": "Acquisition Function Maximizer: Random Search (sorted)"
  }
}