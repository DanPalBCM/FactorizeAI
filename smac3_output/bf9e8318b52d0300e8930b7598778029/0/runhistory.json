{
  "stats": {
    "submitted": 10,
    "finished": 10,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      Infinity,
      0.0,
      2,
      1694799765.738323,
      1694799765.7407324,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFBO2.py\", line 679, in train\n    X, X_r = NMF_sklearn(X_scaled, **config_dict)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFBO2.py\", line 26, in NMF_sklearn\n    W = model.fit_transform(X)\n        ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/utils/_set_output.py\", line 140, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1566, in fit_transform\n    W, H, n_iter = self._fit_transform(X, W=W, H=H)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1618, in _fit_transform\n    raise ValueError(\nValueError: When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.\n",
        "error": "ValueError('When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.')"
      }
    ],
    [
      1,
      null,
      398764591,
      null,
      Infinity,
      0.0,
      2,
      1694799765.7432323,
      1694799765.7453008,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFBO2.py\", line 679, in train\n    X, X_r = NMF_sklearn(X_scaled, **config_dict)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/AutoMF/AutoMFBO2.py\", line 26, in NMF_sklearn\n    W = model.fit_transform(X)\n        ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/utils/_set_output.py\", line 140, in wrapped\n    data_to_wrap = f(self, X, *args, **kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1566, in fit_transform\n    W, H, n_iter = self._fit_transform(X, W=W, H=H)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/mnt/belinda_local/daniel/home/anaconda3/envs/GenerativeAI/lib/python3.11/site-packages/sklearn/decomposition/_nmf.py\", line 1618, in _fit_transform\n    raise ValueError(\nValueError: When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.\n",
        "error": "ValueError('When beta_loss <= 0 and X contains zeros, the solver may diverge. Please add small values to X, or use a positive beta_loss.')"
      }
    ],
    [
      2,
      null,
      209652396,
      null,
      0.9001874055816304,
      0.0011970996856689453,
      1,
      1694799765.7477064,
      1694799765.7500634,
      {}
    ],
    [
      2,
      null,
      398764591,
      null,
      0.9001874055816304,
      0.0010678768157958984,
      1,
      1694799765.7521133,
      1694799765.7543836,
      {}
    ],
    [
      2,
      null,
      924231285,
      null,
      0.9001874055816304,
      0.0011281967163085938,
      1,
      1694799765.7575123,
      1694799765.759808,
      {}
    ],
    [
      3,
      null,
      209652396,
      null,
      0.9001874055816304,
      0.001561880111694336,
      1,
      1694799765.9679606,
      1694799765.9707484,
      {}
    ],
    [
      3,
      null,
      398764591,
      null,
      0.9001874055816304,
      0.0014123916625976562,
      1,
      1694799765.9734256,
      1694799765.9760761,
      {}
    ],
    [
      3,
      null,
      924231285,
      null,
      0.9001874055816304,
      0.0015149116516113281,
      1,
      1694799765.9784377,
      1694799765.9811678,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      0.4217489359369945,
      0.002751588821411133,
      1,
      1694799765.9845407,
      1694799765.9883459,
      {}
    ],
    [
      4,
      null,
      398764591,
      null,
      0.4217489359369944,
      0.0028171539306640625,
      1,
      1694799765.9909103,
      1694799765.9949327,
      {}
    ]
  ],
  "configs": {
    "1": {
      "alpha_W": 0.2668785210698843,
      "init": "nndsvda",
      "l1_ratio": 0.10750788170844316,
      "n_components": 2,
      "solver": "mu",
      "verbose": 0,
      "beta_loss": "itakura-saito"
    },
    "2": {
      "alpha_W": 0.517645406536758,
      "init": "random",
      "l1_ratio": 0.8396603688597679,
      "n_components": 5,
      "solver": "cd",
      "verbose": 1
    },
    "3": {
      "alpha_W": 0.8917730007820798,
      "init": "random",
      "l1_ratio": 0.7805291762864555,
      "n_components": 5,
      "solver": "mu",
      "verbose": 0,
      "beta_loss": "frobenius"
    },
    "4": {
      "alpha_W": 0.7151893663724195,
      "init": "nndsvd",
      "l1_ratio": 0.832619845547938,
      "n_components": 4,
      "solver": "mu",
      "verbose": 0,
      "beta_loss": "kullback-leibler"
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Acquisition Function Maximizer: Random Search (sorted)",
    "4": "Acquisition Function Maximizer: Random Search (sorted)"
  }
}